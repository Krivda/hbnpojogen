package ${packagename};
###
######## Macros
#macro(prefix)
#if ( $property.isBooleanField() && !$property.isIdField())is#{else}get#end
#end
##
#################################### END MACROS ####################
#foreach( $import in $imports )
import $import;
#end
import java.util.List;
import ru.metang.utils.entity.IEntity;
#set ($fullTypeOfId = "---")


/**
 * Object interface mapping for hibernate-handled table: ${class.tableObj.dbName}.
 * @author autogenerated
 */

public interface I$class.className extends IEntity#if($class.subclass), I$class.extendsFrom.clazz.className#end {


##
##
## Getters
##
##
#foreach( $property in $properties )
#set ($fullTypeOfId =  "$property.JavaType")
#if ( $property.oneToMany)
   #set ($fullType =  "List<$property.JavaType>")
   #set ($fullJDType = "List&lt;$property.JavaType&gt;")
#else
#if ( $property.manyToMany )
	#set ($fullType =  "List<$property.manyToManyLink.dstProperty.clazz.className>")
	#set ($fullJDType =  "List&lt;$property.manyToManyLink.dstProperty.clazz.className&gt;")
#else
   #set ($fullType =  "$property.JavaType")
   #set ($fullJDType =  "$property.JavaType")
#end
#end

    /**
     * Return the value associated with the column: $property.propertyName.
	 * @return A $fullJDType object (this.$property.propertyName)
	 */
	$fullType #prefix()${property.niceJavaName}();

##
##
## one-to-many
##
##
#if ( $property.oneToMany )
	/**
	 * Adds a bi-directional link of type ${property.JavaName} to the ${property.nicePropertyName} set.
	 * @param $property.propertyName item to add
	 */
	void add${property.JavaName}(${property.javaType} $property.propertyName);
#end
##
##
##
## many-to-many
##
##
#if ( $property.ManyToMany )
	/**
	 * Adds a bi-directional link of type ${property.JavaName} to the set.
	 * @param $property.propertyName item to add
	 */
	void add${property.JavaName}(${property.javaType} $property.propertyName);
#end

##
##
## Setters
##
##

    /**
     * Set the value related to the column: $property.propertyName.
	 * @param $property.propertyName the $property.propertyName value you wish to set
	 */
	void set${property.niceJavaName}(final $fullType $property.propertyName);
#end

## Join Tables
#foreach ($joinMap in $class.joinMappings)
#if ($joinmap.dstProperty.clazz.isInNoOutputList)

	/**
	* Utility method to add a ${joinMap.dstProperty.clazz.className} by using the link class table ($joinMap.linkClass.className).
	* This method takes care of maintaining the proper bidirectional links
	* @param ${joinMap.dstProperty.clazz.getClassPropertyName()} ${joinMap.dstProperty.clazz.className} object to add
	* @return $joinMap.linkClass.className The linker object.
	*/
	$joinMap.linkClass.className add${joinMap.dstProperty.clazz.className}(${joinMap.dstProperty.clazz.className} ${joinMap.dstProperty.clazz.getClassPropertyName()});
#end
#end
	// end of interface
}
